//Сопоставьте простейшие операции, указанные в левом столбце с  результатами их вычислений, приведенными в правом. Изначальные значения для всех операций: х=6 и y=3;

x=y                        x = 3; y = 3;
x = x + y                  x = 9; y = 3;
x = y - x                  x = -3; y = 3;
x = x * y                  x = 18; y = 3;
x = x % y                  x = 0; y = 3;
x = x / y                  x = 2; y = 3;
x = ++y                    x = 4; y = 4;
x = y++                    x = 3; y = 4;
x = - -y                   x = 2; y = 2;
x = y- -                   x = 3; y = 2;

//Сопоставьте результаты вычисления операций присваивания при изначальных значениях х = 6 и y = 3;Сопоставьте результаты вычисления операций присваивания при изначальных значениях х = 6 и y = 3;

x += y     x = 9
x -= y     x = 3
x *= y     x = 18
x /= y     x = 2
x %= y     x = 0


//вписать в указанное место код, который будет присваивать переменной "х" значение суммы переменных "a" и "b".

//Указанные ниже Sample Input (образец входных данных) и Sample Output (образец выходных данных) - это пример. Они показывают, что при значениях переменных "a" и "b" как в Sample Input, например 2 и 8, ваш результат должен быть такой, как указано в Sample Output. Например, если Sample Input равен 2 и 8, то Sample Output должен быть 10, т.е. сумма первой и второй переменных.

//Обратите внимание: вам нигде в этом курсе не нужно использовать console.log или document.write, всегда нужно только вернуть из функции результат с помощью return.

function testSum(a, b) {
    var x;
    return a + b;
    return x;
    
    
 /*   Операторы сравнения :

Все следующие примеры рассматриваем при x = 5

Оператор равно ==
Эта операция выполняется с преобразованием типов, т.е. если один из операндов - число три, а второй - символ тройки, то выражение 3 == '3' будет истинным, поскольку второй операнд будет приведен к типу первого, если это допускается.
(x == 8 будет false, x == y будет true при y = '5' )

Оператор строго равно ===
Это сравнение будет истинным без учета преобразования типа
( x === 5 будет true, x === '5' будет false)

Оператор не равно != (x != 8 будет true)

Оператор строго не равно !== (возвращает true если операнды строго не равны или имеют разный тип.)

Оператор больше чем > (x > 8 это false)
Оператор меньше чем < (x < 8 это true)

Оператор больше или равно >=
(x >= 8 это false)
Оператор меньше или равно <=
(x <= 8 это true) */



/*логические операторы, их немного.

В данных примерах x = 6; y = 3;

Оператор && (Логическое И)
x < 10 && y > 1 это true

Оператор || (Логическое ИЛИ)
x == 5 || y == 5 это false

Оператор ! (Логическое НЕ)
!(x == y) это true */


1 - Самым высоким приоритетом обладают операторы группировки. В данном случае это скобки "(" и ")"

i = (a + b) * c 
/* 
В данном случае группировка имеет более высокий приоритет чем умножение, 
поэтому сначала выполнятся все операции внутри скобок 
*/
2 - За ними следуют операторы постфиксного (указанного ПОСЛЕ переменной) инкремента и декремента 

a-- //Постфиксный декремент
b++ //Постфиксный инкремент
3 - Следующими по приоритету идут префиксные инкремент и декремент а также логическое отрицание

--x //Префиксный декремент
++y //Префиксный инкремент
 !z //Логическое отрицание
4 - За ними идет возведение в степень

x = y ** z //Возведение в степень
5 - Следующая группа: умножение, деление и остаток от деления

x = y * z //Умножение
x = y / z //Деление
x = y % z //Остаток от деления
6 - Еще меньшим приоритетом обладают операции сложения и вычитания

x = y + z //Сложение
x = y - z //Вычитание
7 - Следом идут операции сравнения

>   //Больше
>=  //Больше или равно
<   //Меньше
<=  //Меньше или равно
8 - Затем операции равенства

==   //Равно 
!=   //Не равно
===  //Строго равно
!==  //Строго не равно
9 - Логические операции
 

&   //Побитовое И
|   //Побитовое ИЛИ (побитовые операции мы не рассматривали в данном уроке)
&&  //Логическое И
||  //Логическое ИЛИ
10 - И наконец последними выполняются операции присваивания

=   //Присваивание
+=  //Присваивание со сложением
-=  //Присваивание с вычитанием
**= //Присваивание с возведением в степень
*=  //Присваивание с умножением
/=  //Присваивание с делением
%=  //Присваивание с остатком от деления



//нужно вписать в указанное место код, который будет присваивать переменной "х" удвоенное значение остатка от деления произведения переменных "a" и "b" на их сумму.
function testOperation(a, b) {
    var x;
    
    x = 2*((a*b)%(a+b));
    return x;
}


